
# This Makefile is for Mac OS 10.14 for 64 bit AFNI, with local linking.
# The required libraries for use should come with Xcode and XQuartz.
#
# Instead of using fink, you should use homebrew to install the following:
#
#    libpng jpeg expat freetype fontconfig openmotif libomp
#    libxt gsl glib2 pkgconfig, gcc (version 8)
#
#
#   Some edits left to do and rename to 10.14 package local


usr_ROOT   = /usr/local

USE_ZLIB  = -DHAVE_ZLIB
LZLIB     = -lz
USE_GIFTI = -DHAVE_GIFTI
LGIFTI    = -lexpat
#LXPM    = -lXpm
LXPM    = 

# ------------------------------
# python from C
# IPYTHON     = -I/anaconda2/include/python2.7 -DSELENIUM_READY
# LPYTHON     = -L/anaconda2/lib/python2.7/config
#IPYTHON     = -I/Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7  -DSELENIUM_READY
#LPYTHON     = -L/Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/config 
IPYTHON     =
LPYTHON     =

#CR
#LDPYTHON    = -lpython2.7
LDPYTHON    = 

# ----------------------------------------------------------------------
# X configuration
#

XROOT   = /opt/local
XROOT_I = -I$(XROOT)/include
XROOT_L = -L$(XROOT)/lib

XLIBS = -lXm -ljpeg.9 -lXt

# ----------------------------------------------------------------------


CCDEBS = -DAFNI_DEBUG -DIMSEQ_DEBUG -DDISPLAY_DEBUG -DTHD_DEBUG
CEXTRA = -m64 -Wcomment -Wformat -DUSE_TRACING -DHAVE_XDBE \
	 -DDONT_USE_MCW_MALLOC $(LESSTIF_DEFS)
CC     = /usr/bin/gcc -O2  -DDARWIN $(CEXTRA)
CCVOL  = $(CC)
CCFAST = $(CC)
CCMIN  = /usr/bin/gcc
CCD    = $(CC) $(CCDEBS)
CCOLD  = $(CC)

#OMPFLAG = -Xpreprocessor -fopenmp -lomp -I"$(brew --prefix libomp)/include" -L"$(brew --prefix libomp)/lib" -DUSE_OMP
OMPFLAG = 

SYSTEM_NAME = macos_11.01_local
INSTALLDIR = $(SYSTEM_NAME)

#CR no libpython yet
#/opt/lib/python2.7/config/libpython2.7.dylib \
		      
EXTRA_INSTALL_FILES = /opt/local/lib/libXm.4.dylib			  \
		      /opt/local/lib/libjpeg.9.dylib			  \
		      /opt/local/lib/libiconv.2.dylib			  \
		      /usr/local/lib/gcc/8/lib/libgcc_s.1.dylib		  \
		      /usr/local/lib/libglib-2.0.0.dylib		  \
		      /usr/local/lib/libgsl.0.dylib			  \
		      /usr/local/lib/libgslcblas.0.dylib		  \
		      /usr/local/lib/gcc/8/lib/libgomp.1.dylib		  \
		      /usr/local/lib/freetype219/lib/libfreetype.6.dylib \
		      /usr/local/lib/libpng16.16.dylib			  \
		      /usr/local/lib/libbz2.1.dylib			  \
		      /usr/local/lib/libintl.8.dylib

EXTRA_INSTALL_COMMANDS = ( cd $(INSTALLDIR) ;                                 \
                           chmod u+w *.dylib ;                                \
                           if [ -d $(HOME)/EXTRAPROGS ]; then $(CP) $(HOME)/EXTRAPROGS/* . ; fi ; )

IFLAGS = -I. $(XROOT_I) -I/usr/include
         
LFLAGS = -L. $(XROOT_L) -L/usr/lib -L/usr/lib -Wl,-x -Wl,-multiply_defined -Wl,warning -Wl,-bind_at_load $(LPYTHON)

CCSVD  = $(CCMIN) -m64 -O0

PLUGIN_SUFFIX = so
PLUGIN_LFLAGS = -m64 -bundle -flat_namespace -undefined suppress -Wl,-x
PLUGIN_CC     = $(CC) -dynamic -fno-common
PLFLAGS       = -m64 -dynamic $(LFLAGS)

# include the line below if you want to include vector arith in 3dDeconvolve_f
# SPECIAL = -framework Accelerate -DUSE_ACCELERATE

AR     = /usr/bin/ar
RANLIB = /usr/bin/ranlib
TAR    = /usr/bin/tar
MKDIR  = /bin/mkdir
GZIP   = /usr/bin/gzip
LD     = $(CCMIN)

RM = /bin/rm -f
MV = /bin/mv -f
CP = /bin/cp -f

LINT = /usr/bin/lint -a -b -u -v -x $(IFLAGS) $(CCDEFS)

LIBDIR = $(INSTALLDIR)
SHOWOFF = -DSHOWOFF=$(SYSTEM_NAME)

INSTALL_PREREQ = suma_gts
# uncomment if the Gnu Scientific Library is installed (libgsl, libgslcblas)
# GSLPROGS = balloon
EXPROGS = $(GSLPROGS)

# for dynamic linking
# CR  
LLIBS  = -lmri -lf2c $(XLIBS) -lXft -lfontconfig \
         -lpng16 -liconv -lXmu -lXp -lXext -lX11      \
         $(LZLIB) $(LGIFTI) $(LDPYTHON) $(LXPM) -lm -lc

# this is called a hack - command to convert dyname -lXm to static for R_io.so
#RLIB_CONVERT = | sed 's/-lXm/\/usr\/lib\/libXm.a/'
RLIB_CONVERT = | sed 's/-lXm/\/usr\/local\/lib\/libXm.a/'

# vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
# For suma
# ZSS Aug. 08. LibGLw.a now made locally and called libGLws.a

SUMA_GL_DYLIB_CMD = -lGL

GLw_IPATH  =
GLw_LIB = -lGLw
# uncomment next two lines if you want to use libGLws.a, SUMA's copy of GLw
GLw_IPATH  = -IGLw_local
GLw_LIB = libGLws.a


SUMA_GLIB_VER = -2.0
SUMA_INCLUDE_PATH = $(GLw_IPATH) -I.. -I../niml $(IFLAGS) -Igts/src -I${usr_ROOT}/lib/glib-2.0/include -I${usr_ROOT}/include/glib-2.0 
SUMA_LINK_PATH = $(XROOT_L) $(LFLAGS) -L..

SUMA_LINK_LIB = $(XLIBS) $(GLw_LIB) $(LLIBS) -lGLU -lGL -lmri -lf2c -lmx -L${usr_ROOT}/lib/ -lglib-2.0 $(SUMA_GL_DYLIB_CMD)
SUMA_MAKEFILE_NAME = SUMA_Makefile
SUMA_BIN_ARCHIVE = SUMA_MacOSX.tar
SUMA_MDEFS = 
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


###############################################################

MAKE = make
include Makefile.INCLUDE
